name: 🚀 Deploy Application with SSL

on:
  push:
    tags:
      - 'v-*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: 🔐 Configure Kubernetes access
      run: |
        echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > /tmp/kubeconfig.yaml
        export KUBECONFIG=/tmp/kubeconfig.yaml

    - name: 🌐 Deploy Ingress Controller
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl patch service -n ingress-nginx ingress-nginx-controller --type='json' -p='[
          {"op": "replace", "path": "/spec/type", "value": "NodePort"},
          {"op": "replace", "path": "/spec/ports/0/nodePort", "value": 30080},
          {"op": "replace", "path": "/spec/ports/1/nodePort", "value": 30443}
        ]'
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=180s

    - name: 🔒 Deploy Cert-Manager
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml
        kubectl wait --namespace cert-manager --for=condition=ready pod --selector=app.kubernetes.io/instance=cert-manager --timeout=300s

    - name: 📝 Configure SSL Issuer
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        # 🚀 PRODUCTION: Используем prod issuer для продакшена
        kubectl apply -f k8s/infrastructure/cluster-issuer-prod.yaml
        
        # 🧪 TESTING: Раскомментировать для тестирования (staging issuer)
        # kubectl apply -f k8s/infrastructure/cluster-issuer-staging.yaml

    - name: 🛠️ Deploy Application
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        # Создаем ConfigMaps
        kubectl create configmap nginx-html --from-file=html/index.html -o yaml --dry-run=client | kubectl apply -f -
        kubectl create configmap nginx-config --from-file=nginx-config/nginx.conf -o yaml --dry-run=client | kubectl apply -f -
        
        # Применяем ВСЕ манифесты приложения
        kubectl apply -f k8s/

    - name: 🌐 Configure Ingress with SSL
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        # 🚀 PRODUCTION: Используем prod ingress для продакшена
        kubectl apply -f k8s/infrastructure/ingress-prod.yaml
        
        # 🧪 TESTING: Раскомментировать для тестирования (staging ingress)
        # kubectl apply -f k8s/infrastructure/ingress-staging.yaml

    - name: 🔄 Restart for Config Changes
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        echo "🔄 Restarting deployment to apply config changes..."
        kubectl rollout restart deployment/nginx-cicd-demo
        kubectl rollout status deployment/nginx-cicd-demo --timeout=180s

    - name: ⏳ Wait for SSL Certificate
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        echo "⏳ Waiting for SSL certificate issuance..."
        sleep 90
        kubectl get certificate
        echo "✅ SSL certificate ready"

    - name: ✅ Verify Deployment
      run: |
        export KUBECONFIG=/tmp/kubeconfig.yaml
        echo "🔍 Checking deployment status..."
        kubectl get pods
        kubectl get ingress
        kubectl get certificate
        
        echo "🎉 Application deployed successfully!"
        echo "🌐 Access your site: https://clerikc.ru"
        echo "💡 Note: For testing, use staging issuer/ingress files"